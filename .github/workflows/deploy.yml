# RSSB Sewadar Management - CI/CD Pipeline
# 
# Automated build and deployment to Firebase Hosting
# Triggers on push to main branch and handles both frontend and backend builds

name: Deploy to Firebase Hosting

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Environment variables
env:
  NODE_VERSION: '18'
  
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Install dependencies for backend
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci --only=production

      # Install dependencies for frontend  
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      # Create backend environment file
      - name: Create backend .env
        run: |
          cd backend
          echo "DATABASE_URL=./database/sewadar.db" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "NODE_ENV=production" >> .env
          echo "PORT=5000" >> .env
          echo "CORS_ORIGINS=https://rssb-sewadar-management.web.app" >> .env

      # Create frontend environment file
      - name: Create frontend .env
        run: |
          cd frontend
          echo "REACT_APP_API_URL=https://rssb-sewadar-management.cloudfunctions.net" >> .env
          echo "REACT_APP_NAME=RSSB Sewadar Management" >> .env
          echo "REACT_APP_VERSION=1.0.0" >> .env
          echo "GENERATE_SOURCEMAP=false" >> .env

      # Initialize backend database
      # - name: Initialize database
      #   run: |
      #     cd backend
      #     npm run migrate
      #     npm run seed

      # Build frontend
      - name: Build frontend
        run: |
          cd frontend
          CI=false npm run build

      # Create build directory structure
      - name: Prepare deployment files
        run: |
          # Copy frontend build to dist for hosting
          mkdir -p dist
          cp -r frontend/build/* dist/
          
          # Backend is already in the correct location for Functions
          # Firebase will handle the backend deployment from the backend/ folder

      # Install Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      # Deploy to Firebase Hosting
      - name: Deploy to Firebase
        run: |
          firebase deploy --token ${{ secrets.FIREBASE_TOKEN }} --project rssb-sewadar-management
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      # Post-deployment notification
      - name: Deployment Success Notification
        if: success()
        run: |
          echo "‚úÖ Deployment successful!"
          echo "üåê Frontend: https://${{ secrets.FIREBASE_HOSTING_URL }}"
          echo "üöÄ API: https://${{ secrets.FIREBASE_HOSTING_URL }}/api"
          echo "üìñ Docs: https://${{ secrets.FIREBASE_HOSTING_URL }}/api/docs"

      # Handle deployment failure
      - name: Deployment Failure Notification  
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs above for error details."
          exit 1

  # Health check job (runs after deployment)
  health-check:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Health Check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          # Check frontend
          echo "üîç Checking frontend..."
          response=$(curl -s -o /dev/null -w "%{http_code}" "https://${{ secrets.FIREBASE_HOSTING_URL }}")
          if [ $response -eq 200 ]; then
            echo "‚úÖ Frontend is healthy"
          else
            echo "‚ùå Frontend health check failed (HTTP $response)"
            exit 1
          fi
          
          # Check API health endpoint
          echo "üîç Checking API..."
          api_response=$(curl -s -o /dev/null -w "%{http_code}" "https://${{ secrets.FIREBASE_HOSTING_URL }}/api/health")
          if [ $api_response -eq 200 ]; then
            echo "‚úÖ API is healthy"
          else
            echo "‚ùå API health check failed (HTTP $api_response)"
            exit 1
          fi
          
          echo "üéâ All systems operational!"

  # Security scan (optional job)
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run security audit
        run: |
          cd backend && npm audit --audit-level=high
          cd ../frontend && npm audit --audit-level=high
          
      - name: Security scan passed
        run: echo "üîí Security scan completed successfully"